[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bess-optimization"
version = "0.1.0"
description = "Battery Energy Storage System optimization framework with MILP solver"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "BESS Optimization Team", email = "contact@bess-optimization.com"}
]
maintainers = [
    {name = "BESS Optimization Team", email = "contact@bess-optimization.com"}
]
keywords = [
    "battery",
    "optimization",
    "energy storage",
    "MILP",
    "renewable energy",
    "arbitrage",
    "ancillary services"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]

dependencies = [
    "numpy>=1.21.0,<2.0.0",
    "pandas>=1.3.0,<2.0.0",
    "pydantic>=1.9.0,<2.0.0",
    "gurobipy>=10.0.0,<11.0.0",
    "pyyaml>=5.4.0",
    "openpyxl>=3.0.0",
    "pyarrow>=6.0.0",
    "scipy>=1.7.0,<2.0.0",
    "python-dotenv>=0.19.0",
    "click>=8.0.0",
    "tqdm>=4.62.0",
    "pandera>=0.13.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "isort>=5.10.0",
    "pre-commit>=2.17.0",
    "sphinx>=4.5.0",
    "ipython>=8.0.0",
]
entsoe = [
    "entsoe-py>=0.5.10",
]
viz = [
    "matplotlib>=3.3.0,<4.0.0",
    "plotly>=5.0.0",
]
all = [
    "bess-optimization[dev,entsoe,viz]",
]

[project.urls]
Homepage = "https://github.com/yourusername/bess-optimization"
Documentation = "https://bess-optimization.readthedocs.io"
Repository = "https://github.com/yourusername/bess-optimization"
Issues = "https://github.com/yourusername/bess-optimization/issues"

[project.scripts]
bess-optimize = "bess.cli:main"
bess-validate = "bess.cli:validate"
bess-generate-template = "bess.cli:generate_template"

[tool.setuptools]
packages = ["bess", "bess.optimization", "bess.data_sources", "bess.utils"]
include-package-data = true

[tool.setuptools.package-data]
bess = ["data/templates/*.csv", "config/*.yaml"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
follow_imports = "silent"
no_implicit_reexport = true
strict_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=bess",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["bess"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/cli.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2

[tool.pylint]
max-line-length = 100
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Protected access
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # Skip assert_used test